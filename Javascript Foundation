- V8 engine - written in c++(low level programming language) by google
- spidermonkey used by firefox is the first js engine created Brendan Eich at Netscape
- single threaded language uses a callback queue
- interpreted language
- computer doesn't understand js, it uses js engine to understand it, it only understand 0,1

-js engine does lexical analysis(parse) which breaks the code into tokens to identify what the code want to do, tkens are formed into AST(Abstract Syntax Tree)
https://astexplorer.net then the tree goes to interpreter then profiler then compiler then code that CPU can understand

simple js engine
function jsengine(code){
    return code.split(/\s+/)
}
jsengine('var a = 5')
//['var', 'a', '=', '5']

Interpreter translate on the fly and read the file line by line
Compiler unline interpreter doesn't translate on the fly, it compiles it to something else

interpreter split out bytecode from high level language(javascript)
compiler will split out into machine code so it goes to CPU so that it can run the code(modern cpu complies it to own native micro code interpret the instructions)

Babel + TypeScript
Have you heard of Babel or TypeScript? They are heavily used in the Javascript ecosystem and you should now have a good idea of what they are:

Babel is a Javascript compiler that takes your modern JS code and returns  browser compatible JS (older JS code).
Typescript is a superset of Javascript that compiles down to Javascript.

Both of these do exactly what compilers do: Take one language and convert into a different one!

both compiler and interpreter has pros and cons, interpreter starts up immediately but it does not optimize the code instead interpret the same
loop again ana again but compiler takes time to start as it converts the code to something but it will optimize it, such as the repetative loops
with the result so the execution will be faster

Combined these two to create JIT(just in time) compiler
in V8 engine the interpreter is called Ignition convert the AST passed code to Bytecode(code interpreted by js engine not low as machine code)
profiler keep watch of interpretation to see the possibility to optimize it, if same lines of code runs few times, profiler will pass something of
the code to compiler(jit compiler) sends and replace the bytecode with the optimized code

jvm or js engine can read bytecode

Don't use, eval(), arguments, for in, with, delete, hidden classes, inline caching -> make out code less optimized

//Inline caching
in compiler it will cache the repeated function
function findUser(user){
    return `found ${user.firstname} ${user.lastname}`
}
const userData {
    firstname: 'test1',
    lastname: 'test2'
}
findUser(userData) //inline caching by compiler

//hidden classes
function Animal(x, y){
    this.x = x;
    this.y = y;
}
const obj1 = new Animal(1,2);
const obj2 = new Animal(3,4);

obj1.a = 30;
obj1.b = 100;
obj2.b = 30;
obj1.a = 100;

adding up new property that too in different order will make compiler unpredictable it will behave obj1 and obj2 to be different and can't able tp optomize it
we have to add all properties in the constructor function to avoid it or add the properties in same order for objects

delete obj1.x = 30; will also create mismatch and slow down the compiler

standard binary executable format - web assembly - all competing browser aggreeing on this format, compile our code to webassembly execute faster on the browser instead of following
js engine process

Memory Heap - place to store and write information - memory allocation - large region in memory thaht js engine provides for us, no order to memory
engine takes care for us to store data
Call Stack - track of where we are on code in order

const number = 610; //allocate memory for number
const string = 'some text'; //allocate memory for a string
const human = { //allocate memory for an object
    first: 'A',
    last: 'B'
}

function calculate(){ //in memoryheap
    const sumTotal = 4 + 5;
    return sumTotal;
}
calculate() // adds to stack // LIFO

in call stack we see anonymous -> Global Execution Context -> anonymous because no name for file -> first action is to run the file which has no
name

Call Stack stores functions and variables

stackoverflow
- maximum call stack size reached
function inception(){
    inception()
}

Garbage Collection
- js is Garbage collected language, automatically frees up the memory we no longer use and collects our garbage

C can control garbage collection, js use 'mark and sweep' algorithm for garbage collection

Memory leaks - memory space that are not garbage collected
//Global variable
var a = 1;
var b = 1;
var c = 1;

//Event listeners
var element = document.getElementById('button');
element.addEventListener('click', onClick) //never removed the listener

//SetInterval
setInterval(()=>{
    //referencing objects //unless clear or stopped garbage collection will not work
})

//example soundcloud -> memoryleak

//single threaded programming language - one instruction at a time - synchronous - Alert freeze the code

Js engine has one stack and one heap, it's synchronous

//js runtime provides web api
'window' on console to check the list of web apis available(provided by browser not javascript) -> eg., setTimeout(), setInterval(), indexedDB, fetch(), DOM
browser underneath use low level programming language like C++ to perform the web api operations
web api(asynchronous)
suppose fetch() call is finished it will be in callback queue and when thread is empty, it push the callback to call stack

console.log('1')
setTimeout(()=>{console.log('2'),1000});
console.log('3');
//1
//3
//2

http://latentflip.com/loupe/?code=ZnVuY3Rpb24gcHJpbnRIZWxsbygpIHsNCiAgICBjb25zb2xlLmxvZygnSGVsbG8gZnJvbSBiYXonKTsNCn0NCg0KZnVuY3Rpb24gYmF6KCkgew0KICAgIHNldFRpbWVvdXQocHJpbnRIZWxsbywgMzAwMCk7DQp9DQoNCmZ1bmN0aW9uIGJhcigpIHsNCiAgICBiYXooKTsNCn0NCg0KZnVuY3Rpb24gZm9vKCkgew0KICAgIGJhcigpOw0KfQ0KDQpmb28oKTs%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D

NodeJS is a Javascript runtime(C++ program) - Global
set to be a server side platform based on asynchronous IO that is non blocking


